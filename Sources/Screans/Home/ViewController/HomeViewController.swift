//
//  HomeViewController.swift
//  MyCoolApp
//
//  Created by Zaitsev Vladislav on 07.08.2025.
//

import UIKit
import SnapKit
import DGCharts

class HomeViewController: UIViewController {
    private let viewModel: HomeViewModel
    private let chartView = HomeStartView()
    
    init(viewModel: HomeViewModel) {
        self.viewModel = viewModel
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view = chartView
        loadStockData()
    }
    
    private func loadStockData() {
        Task {
            await viewModel.fetchStocks(symbol: "MSFT", interval: "5min") { [weak self] result in
                guard let self = self else { return }
                switch result {
                case .success(let stock):
                    guard let stock = stock else { return }
                    self.updateChart(with: stock)
                case .failure(let error):
                    print("–û—à–∏–±–∫–∞: \(error)")
                }
            }
        }
    }
    
    private func updateChart(with stock: Stock) {
        let candles = stock.timeSeries
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        guard !candles.isEmpty else {
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        }
        
        // –°–æ–∑–¥–∞—ë–º —Ç–æ—á–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞: x = –∏–Ω–¥–µ–∫—Å, y = —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        var entries: [ChartDataEntry] = []
        for (index, candle) in candles.enumerated() {
            entries.append(ChartDataEntry(x: Double(index), y: candle.close))
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–∏–Ω–∏—é –≥—Ä–∞—Ñ–∏–∫–∞
        let set = LineChartDataSet(entries: entries, label: "\(stock.metaData.symbol) –¶–µ–Ω–∞")
        set.setColor(.systemBlue)
        set.lineWidth = 2.0
        set.drawCirclesEnabled = false
        set.mode = .cubicBezier // –ø–ª–∞–≤–Ω–∞—è –∫—Ä–∏–≤–∞—è
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫ –≥—Ä–∞—Ñ–∏–∫—É
        let data = LineChartData(dataSet: set)
        chartView.chartView.data = data
        
        // –ü–æ–¥–ø–∏—Å–∏ –ø–æ –æ—Å–∏ X: —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        let labels = candles.map {
            $0.timestamp.formatted(date: .omitted, time: .shortened)
        }
        
        chartView.chartView.xAxis.valueFormatter = IndexAxisValueFormatter(values: labels)
        chartView.chartView.xAxis.granularity = 1
        chartView.chartView.xAxis.labelRotationAngle = -45
        chartView.chartView.xAxis.wordWrapEnabled = true
        chartView.chartView.xAxis.avoidFirstLastClippingEnabled = true
        chartView.chartView.rightAxis.enabled = false
        
//        chartView.chartView.leftAxis.granularity = 0.5 // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.5 —Ä—É–±–ª—è/–¥–æ–ª–ª–∞—Ä–∞)

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —à–∞–≥, –Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–∫
        chartView.chartView.leftAxis.setLabelCount(6, force: true)
        
        set.drawValuesEnabled = false // üî• –ì–ª–∞–≤–Ω–æ–µ: –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        chartView.chartView.highlightPerTapEnabled = true // –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø—Ä–∏ —Ç–∞–ø–µ
        chartView.chartView.highlightPerDragEnabled = true
        chartView.chartView.marker = ChartMarkerView(frame: CGRect(x: 0, y: 0, width: 60, height: 30))
    }
}
